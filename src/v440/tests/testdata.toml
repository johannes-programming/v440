[data.strings]
valid = [

    # Basic Versioning
    "1.0.0",
    "0.9.1",
    "2.1.0",
    "10.5.3",
    "0.0.1",
    "0.0.0",
    "0.1",
    "1.2",
    "2.4",

    # Pre-releases (alpha, beta, release candidate)
    "1.0.0a1",
    "2.0b3",
    "0.9.1rc4",
    "1.1.0-alpha",
    "3.0.0b2",
    "4.1.0-rc.1",
    "1.1a0",
    "1.1.0-alpha.2",
    "5.0rc1",

    # Post-releases
    "1.0.0.post1",
    "2.1.0.post4",
    "3.2.1.post7",
    "1.2.post.3",
    "1.2.0-post4",
    "0.9.0post5",

    # Development releases
    "1.0.0.dev1",
    "2.0.0.dev2",
    "0.9.1.dev10",
    "2.1.dev0",
    "1.0dev5",
    "1.1.0-dev3",
    "0.5.0.dev4",

    # Local Versions
    "1.0.0+local",
    "2.0.1+20130313144700",
    "1.0.0+exp.sha.5114f85",
    "1.0.0+abc.5.1",
    "1.0.1+2019.10.22",
    "0.9.0+ubuntu1",
    "2.1.0+build.12345",
    "3.2.1+dfsg1",

    # Epoch Versions
    "1!0.1.0",
    "2!1.0.0",
    "1!2.3.4",
    "0!0.0.1",
    "3!1.2.0",

    # Mixed Versions (combining post, dev, pre-releases, etc.)
    "1.0.0a1.post2",
    "2.1.0b2.dev3",
    "1.2.3rc1+build123",
    "1!1.0.0a1.dev1",
    "1.2.3.post4+exp.sha.5114f85",
    "3.2.1rc2.post1.dev3",
    "0!0.9.0.post5.dev7+local.5",
    "2!3.4.5a2+ubuntu1",

    # Edge Cases / Special Forms
    "1.0",
    "v2.0",  # Some might write v prefix in tags, though it's non-standard
    "1.2.3-456",
    "2.0.0-beta",
    "1.0.0.dev1234567",
    "1.0.0.post123456789",
    "1.2.3+abc.123",
    "1.0+deadbeef",
    "0.1+build.1",

    # Invalid or Potentially Problematic Cases (for error handling)
    "1.2.3-beta",  # non-PEP 440 pre-release format
    "01.0.0",  # leading zero
    "1.0.0beta1",  # invalid beta format
    "v1.2.3",  # use of v, technically non-standard

    # Increasing complexity with more combinations
    "1.0.0a1.post2.dev3",
    "1!2.0.0b3.post1+exp.sha.1234abcd",
    "0.9.0.post99.dev1000+ubuntu12.04.5",
    "3!2.1.0-alpha.5+build.34567abcd",
    "1.2.3a1.post11.dev7+sha256.abc123def456",
    "0!0.0.0a1.post9999.dev8888+local-build.0",
    "42!1.0.0rc999.post999.dev9999+exp.build.local1",

    # Combining epochs with local versions
    "2!1.0.0+local.version.1234",
    "1!2.0.1.post3.dev1+local.hash.deadbeef",
    "3!4.5.6a2.post8.dev9+build.sha.abcdef123456",

    # Advanced pre-release + post-release + development combinations
    "0.1a1.post2.dev0+local.build.1234abc",
    "2!5.6.7b5.post10.dev1000+exp.sha12345678",
    "1.0.0b99.post8888.dev7777+local.version.abcdef",
    "0.5.0rc1.post1111.dev987+local.build.exp123",
    "0!1.1a1.post1.dev100+local.build.hash99999",

    # Very large versions with long numeric parts
    "1.0.0.post999999.dev9999999+build.1234567890",
    "0!99999999.99999.99999+local.version.9876543210",
    "100!0.0.0a0.post0.dev0+exp.sha.0",
    "2!999.999.999a999.post9999.dev9999+local.build.9",
    
    # Complex strings with multiple epochs, large numbers, and combinations
    "10!9999.8888.7777a6666.post5555.dev4444+build.hash123abc",
    "1!1.1a1000000000.post1000000000.dev1000000000+local.0",
    
    # Mixed use of pre-release and post-release with complex local versions
    "1.0.0a1.post2+ubuntu16.04",
    "2.0.0-rc.1.post2+build.sha.e91e63f0",
    "1.0.0-alpha+linux-x86_64",
    "0.1.0-beta+20190506.commit.gdeadbeef",

    # Invalid cases (testing error handling for extreme cases)
    "1.0.0-alpha_1",  # invalid separator
    "v1.0.0.post0.dev0",  # 'v' prefix with multiple post/dev releases
    "1.0.0.a1",  # invalid pre-release format
    "1.2.3alpha1.post2",  # invalid pre-release format
    "00!1.0.0",  # invalid epoch with leading zero
    "1.0.0a01.post00.dev01+build00",  # invalid leading zeros
    "v1.0.0-0",  # invalid pre-release number

    # Extreme cases with very long versions
    "0.1.0a12345678901234567890.post12345678901234567890.dev12345678901234567890+build12345678901234567890",
    "1.2.3+local.version.with.extremely.long.identifier.123456789012345678901234567890",
    "0!0.0.0a9999999999999.post9999999999999.dev9999999999999+build.sha.9999999999999"
]
incomp = [
    # Increasing complexity with more combinations
    "1!1.0.0.dev4567.post9+20190101",
    
    # Invalid cases (testing error handling for extreme cases)
    "1.0.0alpha_beta",  # invalid underscore in pre-release
    "1!2.0.0+",  # trailing plus sign
    "1.0.0++local.version.doubleplus",  # double plus in local version   

    # Cases with inconsistent pre-release and post-release ordering
    "1.0.0.post1a1",  # post before alpha (invalid)
    "1.0.0.dev1rc1",  # dev before rc (invalid)
    "2!1.0.0rc1.post1a1",  # rc and post combined in wrong order (invalid)
    "3!1.0.0a1.dev1rc1+build123"  # rc after dev (invalid)
]
exc = [
    # Invalid or Potentially Problematic Cases (for error handling)
    "1..0",  # double dot
    "1.0.0+@build",  # invalid character
    
    # Invalid cases (testing error handling for extreme cases)
    "1.0.0...dev",  # triple dots
    "0.0.0a1.post0.dev0+local.build.invalid_character#",
    "1.0.0a1..post2",  # double dot
    "2!1..0",  # double dot with epoch
    "1.0.0+build@sha.123",  # invalid character in local version  
]


[data.devint.test_dev_as_int]
v_version = "1.2.3"
v_dev =  1
v_str = "1.2.3.dev1"
v_ans = 1

[data.devint.test_dev_as_string_int]
v_version = "1.2.3"
v_dev =  "42"
v_str = "1.2.3.dev42"
v_ans = 42

[data.devint.test_dev_as_string_with_dev_prefix]
v_version = "1.2.3"
v_dev =  "dev1000"
v_str = "1.2.3.dev1000"
v_ans = 1000

[data.devint.test_dev_as_string_with_dev_dot_prefix]
v_version = "1.2.3"
v_dev =  "dev.2000"
v_str = "1.2.3.dev2000"
v_ans = 2000

[data.devint.test_dev_as_string_with_dot_dev_prefix]
v_version = "1.2.3"
v_dev =  ".dev.3000"
v_str = "1.2.3.dev3000"
v_ans = 3000

[data.devint.test_dev_as_string_with_dot_dev_number_prefix]
v_version = "1.2.3"
v_dev =  ".dev4000"
v_str = "1.2.3.dev4000"
v_ans = 4000

[data.devint.test_dev_as_list]
v_version = "1.2.3"
v_dev =  ["dev", "6000"]
v_str = "1.2.3.dev6000"
v_ans = 6000

[data.devint.test_dev_as_uppercase_string]
v_version = "1.2.3"
v_dev =  "DEV7000"
v_str = "1.2.3.dev7000"
v_ans = 7000

[data.devint.test_dev_as_mixed_case_string]
v_version = "1.2.3"
v_dev =  "dEv8000"
v_str = "1.2.3.dev8000"
v_ans = 8000

[data.devint.test_dev_as_list_mixed_case]
v_version = "1.2.3"
v_dev =  ["dEV", "9000"]
v_str = "1.2.3.dev9000"
v_ans = 9000

[data.devint.test_dev_as_false]
v_version = "1.2.3"
v_dev = false
v_str = "1.2.3.dev0"
v_ans = 0

[data.devint.test_dev_as_true]
v_version = "1.2.3"
v_dev = true
v_str = "1.2.3.dev1"
v_ans = 1



[data.spec.test_basic_version_with_post_specifier]
# Test basic version with post specifier using a hyphen
string_a = "1.2.3-4"
string_b = "1.2.3.post4"

[data.spec.test_version_with_multiple_post_specifiers]
# Test multiple post specifiers, last one should take precedence
string_a = "1.2.3-4-5"
string_b = "1.2.3.post5"

[data.spec.test_version_with_mixed_post_and_dev_specifiers]
# Test multiple mixed specifiers (dev, post), last one should take precedence
string_a = "1.2.3-dev1-post2-dev3"
string_b = "1.2.3.post2.dev3"

[data.spec.test_version_with_pre_release_and_post_specifiers]
# Test pre-release specifier followed by a post-release
string_a = "1.2.3a1-4"
string_b = "1.2.3a1.post4"

[data.spec.test_version_with_multiple_pre_and_post_specifiers]
# Test multiple pre-release and post-release specifiers, last one should take precedence
string_a = "1.2.3a1-4-5"
string_b = "1.2.3a1.post5"

[data.spec.test_version_with_post_and_local_specifiers]
# Test post-release with local version specifier
string_a = "1.2.3-4+local"
string_b = "1.2.3.post4+local"

[data.spec.test_version_with_post_specifier_and_epoch]
# Test version with an epoch and post specifier
string_a = "1!1.2.3-4"
string_b = "1!1.2.3.post4"

[data.spec.test_version_with_wrong_order_specifiers]
# Test version with wrong order of specifiers (e.g., post before pre)
string_a = "1.2.3-4a1"
string_b = "1.2.3a1.post4"

[data.spec.test_version_with_multiple_misordered_specifiers]
# Test version with a more complex wrong ordering of specifiers
string_a = "1.2.3-4a1-dev5-6"
string_b = "1.2.3a1.post6.dev5"

[data.spec.test_version_with_dev_specifier_after_post]
# Test version where a dev specifier follows a post-release (last one takes precedence)
string_a = "1.2.3-4-dev5"
string_b = "1.2.3.post4.dev5"

[data.spec.test_version_with_epoch_and_wrong_order_specifiers]
# Test version with epoch and mixed, wrong order of specifiers
string_a = "1!1.2.3-4-dev2"
string_b = "1!1.2.3.post4.dev2"

[data.spec.test_version_with_multiple_epoch_and_specifiers]
# Test multiple version specifiers (only last specifier should count)
string_a = "2!1.2.3-4-5"
string_b = "2!1.2.3.post5"

[data.spec.test_version_with_repeated_dev_specifier]
# Test version where the dev specifier is repeated multiple times
string_a = "1.2.3-dev1-dev2"
string_b = "1.2.3.dev2"

[data.spec.test_version_with_complex_specifiers_and_local]
# Test a complex version with mixed specifiers and a local version
string_a = "1.2.3a1-4-dev5+local"
string_b = "1.2.3a1.post4.dev5+local"

[data.spec.test_version_with_multiple_releases_and_epoch]
# Test version with multiple release-like elements and an epoch
string_a = "1!1.2.3a1-4-dev5-6+local"
string_b = "1!1.2.3a1.post6.dev5+local"



[data.release.test_release_basic_assignment]
# Test simple assignment of a list of non-negative integers
query = [1, 2, 3]
solution = [1, 2, 3]

[data.release.test_release_trailing_zeros]
# Test that trailing zeros are removed
query = [1, 2, 3, 0, 0]
solution = [1, 2, 3]

[data.release.test_release_zero]
# Test that a single zero is allowed
query = [0]
solution = []

[data.release.test_release_empty_list]
# Test empty list assignment
query = []
solution = []

[data.release.test_release_conversion_string]
# Test assignment of string that can be converted to numbers
query = ["1", "2", "3"]
solution = [1, 2, 3]

[data.release.test_release_conversion_mixed]
# Test assignment of mixed string and integer values
query = ["1", 2, "3"]
solution = [1, 2, 3]


[data.data_property.local]
query="42!1.2.3.dev1337+5.nov"
solution="42!1.2.3.dev1337+5.nov"

[data.data_property.hitch]
query=4.2
solution="4.2"

[data.data_property.dragon]
query=9001
solution="9001"

[data.data_property.local_again]
query="1701!4.5.6.rc255+reset"
solution="1701!4.5.6rc255+reset"
